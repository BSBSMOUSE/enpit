#+STARTUP: latexpreview

#+LATEX_CLASS: beamer_lecture
#+LaTeX_CLASS_OPTIONS: [t, aspectratio=169]

#+OPTIONS: H:3		# Frameのレベル
#+OPTIONS: toc:nil
#+OPTIONS: ^:nil
#+OPTIONS: *:t

# #+BEAMER_THEME: Madrid
#+BEAMER_THEME: Berkeley
# #+BEAMER_COLOR_THEME: spruce
#+BEAMER_COLOR_THEME: seahorse
#+BEAMER_INNER_THEME: rectangles

#+TITLE: ビジネスアプリケーション演習
#+AUTHOR: 中鉢 欣秀・上田 隆一
#+DATE: 2014-09-22

#+LATEX_HEADER: \institute[AIIT]{産業技術大学院大学(AIIT)}

#+COLUMNS: %45ITEM %10BEAMER_ENV(Env) %10BEAMER_ACT(Act) %4BEAMER_COL(Col) %8BEAMER_OPT(Opt)
#+PROPERTY: BEAMER_col_ALL 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 0.0 :ETC

* 第1章 ガイダンス
** 自己紹介
*** 自己紹介
**** 名前
     - 中鉢 欣秀（ちゅうばち よしひで）
**** 出身地
     - 宮城県仙台市
**** 肩書
     - 産業技術大学院大学 産業技術研究科 \\ 情報アーキテクチャ専攻 准教授
*** 連絡先
    - E-Mail :: yc@aiit...
    - Facebook :: ychubachi
    - Twitter :: ychubachi （あんまり使ってない）
    - Skype :: ychubachi （あんまり使ってない）
*** 学歴
| 1991年 | 4月    | 慶應義塾大学環境情報学部 入学   |
| 1995年 | *10月* | 同大大学院 政策・メディア研究科 |
|        |        | 修士課程 入学                   |
| 1997年 | 10月   | 同大大学院 政策・メディア研究科 |
|        |        | 後期博士課程 入学               |
| 2004年 | 10月   | 同大大学院 政策・メディア研究科 |
|        |        | 後期博士課程 卒業               |
|        |        | 学位：博士（政策・メディア）    |

*** 職歴
| 1997年 | 10月 | 合資会社ニューメリック設立        |
|        |      | *社長就任*                        |
| 2005年 | 4月  | 独立行政法人科学技術振興機構      |
|        |      | PD級研究員                        |
|        |      | （長岡技術科学大学）              |
| 2006年 | 4月  | 産業技術大学院大学 産業技術研究科 |
|        |      | 情報アーキテクチャ専攻 准教授     |
*** 起業経験
**** 社名
     - 合資会社ニューメリック
**** 設立
     - 1997年
**** 資本金
     - *18万円*
*** 起業の背景
**** 設立当時の状況
     - Windows 95が普及（初期状態でインターネットは使えなかった）
     - 後輩のやっていたベンチャーの仕事を手伝って面白かった
**** 会社設立の理由
     - 「やってみたかった」から
     - 少しプログラムがかければ仕事はいくらでもあった
     - 後輩にそそのかされた・笑
*** 起業から学んだこと
      - 実プロジェクトの経験
      - 使える技術
      - お金は簡単には儲からない
*** 教育における関心事
**** 情報技術産業の変化
    - 情報技術のマーケットが変化
    - ユーザ・ベンダ型モデルの終焉
**** モダンなソフトウエア開発者
  - 新しいサービスの企画から，ソフトウエアの実装まで何でもこなせる開発者
  - このような人材の育成方法
** 授業の全体像
*** 学習目標と目的
**** 目標
     - ビジネスアプリケーションを構築するための基礎力
     - 分散型PBLを実施する上で必要となる知識やツールの使い方
     - これら活用するための自己組織的なチームワーク 
**** 目的
     - 分散ソフトウェア開発のための道具を学ぶ
       - 開発環境（Ruby），VCSとリモートリポジトリ（GitHub）
       - テスト自動化，継続的インテグレーション，PaaS
*** 前提知識と到達目標
**** 前提とする知識
     - 情報系の学部レベルで基礎的な知識を持っていること
**** 最低到達目標
     - 授業で取り上げる各種ツールの基本的な使い方を身につける
**** 上位到達目標
     - 授業で取り上げる各種ツールの高度な使い方に習熟する．
*** 授業の形態
**** 対面授業
     - 担当教員による講義・演習
**** 個人演習
     - 個人によるソフトウエア開発
**** グループ演習
     - グループによるソフトウエア開発
** 授業の方法
*** 講義・演習・課題
**** 講義
     - ツールの説明
     - ツールの使い方
**** 演習
     - 個人でツールを使えるようになる
     - グループでツールを使えるようになる
*** 成績評価
**** 課題
     - 個人でソフトウエアを作る
     - グループでソフトウエアを作る
**** 評価の方法
      - 課題提出と実技試験
**** 評価の観点
      - 分散PBLで役に立つ知識が習得できたかどうか
** モダンなソフトウエア開発
*** ソフトウエア開発のための方法・言語・道具

#+CAPTION: The Framework-Language-Tool framework.
#+NAME: FLT_framework
#+ATTR_LATEX: :width 0.6\textwidth
[[./figures/FLT_framework.pdf]]
*** 授業で取り上げる範囲
**** 取り上げること
     - 方法を支えるための道具
     - 良い道具には設計概念として方法論が組み込まれている
     - 道具はプログラミング言語を問わない
**** 取り扱わないこと
     - 方法論そのものについてはアジャイル開発特論で学ぶ
     - 言語の備えるエコシステムについては必要な範囲で学ぶ
       # 3Qのフレームワークの授業で取り上げる予定（非enPiT科目）
*** Scrumするための道具

#+CAPTION: The modern tools for Scrum developments.
#+NAME: tools
#+ATTR_LATEX: :width 0.6\textwidth
[[./figures/tools.pdf]]

*** モダンな開発環境の全体像
**** 仮想化技術（Virtualization）
     - WindowsやMacでLinux上でのWebアプリケーション開発を学ぶことができる
     - HerokuやTravis CI等のクラウドでの実行や検査環境として用いられている
**** ソーシャルコーディング（Social Coding）
     - LinuxのソースコードのVCSとして用いられているGitを学ぶ
     - GitはGitHubと連携することでOSS型のチーム開発ができる

** ★演習課題（準備作業）★
*** クラウドのアカウント作成
**** GitHub
     - [[[https://github.com/join][Join GitHub · GitHub]]]
**** Heroku
     - [[[https://id.heroku.com/signup][Heroku - Sign up]]]
**** Travis CI
     - [[[https://travis-ci.org/][Travis CI]]]
       - Travis CIは，GitHubのアカウントでログインできる
*** enPiT仮想化環境のアップデート
**** 作業内容
     - enPiT仮想化環境（vagrantのbox）を更新しておく
**** コマンド

#+begin_src bash
cd ~/enpit
vagrant destroy
vagrant box update
vagrant up
#+end_src

*** enPiT仮想化環境にログイン
**** 作業内容
     - 前の操作に引き続き，仮想化環境にSSH接続する
**** コマンド
#+begin_src bash
vagrant ssh
#+end_src

*** github-connectスクリプト
**** URL
     - [[[https://gist.github.com/ychubachi/6491682][github-connect.sh]]]
**** git conifgを代行
     - GitHubにログインし，名前とemailを読み込んでgitに設定
**** SSHの鍵生成と登録
     - SSH鍵を作成し，公開鍵をGitHubに登録してくれる
*** github-connect.shの実行
**** 作業内容
     - スクリプトを起動し，設定を行う
     - GitHubのログイン名とパスワードを聞かれるので，入力する
     - rsa key pairのパスフレーズは入力しなくて構わない
**** コマンド

#+begin_src bash
github-connect.sh
#+end_src

*** GitとGitHubの設定確認     
**** Gitの設定確認
#+begin_src bash
git config --list
#+end_src
**** GitHubの設定確認
     - ブラウザでGitHubのSSH Keyページを開く

* 第2章 ローカルリポジトリの操作
** ローカルリポジトリ
*** Gitのローカルリポジトリの作成
**** ローカルリポジトリ
     - ソースコードや各種のファイルを保存し，開発に利用する
     - 「 =my_enpit= 」というディレクトリを作成し，初期化する
**** コマンド

#+begin_src bash
mkdir ~/my_enpit
cd ~/my_enpit
git init
#+end_src

*** Gitの設定ディレクトリ
**** 隠しフォルダ「 =.git= 」
     - Gitソースコードの履歴情報や，各種の設定をGitが保存するディレクトリ
     - このフォルダは通常，Gitを経由しないで変更することはない
**** 確認方法

#+begin_src bash
ls -a
find .git
#+end_src

** リモートリポジトリ
*** Hubコマンド
**** enPiT環境のHubコマンド
    - [[https://github.com/github/hub][github/hub]]
**** GitへのGitHub操作機能追加
    - 通常のGitの機能に加えて，GitHub用のコマンドが利用できる
    - エイリアス設定しており，コマンド名は「git」のまま
**** 確認方法

#+begin_src bash
git version
alias git
#+end_src

*** Hubコマンドによるリモートリポジトリの作成
**** 作業内容
     - コマンドライン操作で，GitHubにリポジトリを作成する
     - Hubコマンドの機能である =git create= を利用
     - 初回既動時にはパスワードか聞かれる
**** コマンド

#+begin_src bash
git create
#+end_src

*** リポジトリの確認方法
**** 確認方法
    - WebブラウザでGitHubを開き，「 =my_enpit= 」ができていることを確認
**** コマンドラインで確認

#+begin_src bash
git remote -vv
#+end_src
** GitとGitHubの基本操作
*** Gitの操作方法
**** マニュアル等
     - [[http://git-scm.com/doc][Git - Documentation]]
**** commitログの書き方
     - [[https://github.com/erlang/otp/wiki/Writing-good-commit-messages][Writing good commit messages · erlang/otp Wiki]]
*** ステータスの確認
**** リポジトリの状態を確認する
     - =git status= は，頻繁に利用するコマンド
     - リポジトリの状態を確認することができる
     - この表示の読み方を理解することが重要
**** コマンド
#+begin_src bash
git status
#+end_src

*** ファイルの追加とステータスの確認
**** 作業内容
     - テキストエディタで =README.md= を作成
     - ステータスの変化を見る
**** コマンド
#+begin_src bash
emacs README.md
git status
#+end_src

*** Add/Commitの方法
**** ステージングエリアを利用する場合
     - git add README.mb
     - git commit -m 'First commit'
**** ステージングエリアを省略する場合
     - git commit -a -m 'First commit'
*** Logの閲覧
**** コミットログ
     - ソースコードに加えた変更の履歴を，commitを単位として閲覧できる
**** コマンド
#+begin_src bash
git log
#+end_src

*** Pushの方法
**** pushとは？
     - ローカルで作成したcommitを，リモートのリポジトリにアップロードすること
     - originとは，リモートのリポジトリの内部的な名前
     - upstreamとは，ブランチ（後述）が紐づいているリポジトリのこと
     - 最初にそのブランチをpushするときは， =--setupstream= オプションを指定
**** コマンド
#+begin_src bash
git push --set-upstream origin master
#+end_src

*** コミットのログを詳細に書く方法
**** エディタを使ったログの記述
    - コミットのログや，Pull requestの記述を，より詳しく書くことができる
    - =commit= や =pull_request= から  =-m= オプションを外すと，エディタが立ち上がる
      - エディタはemacsを起動するようになっている
      - =C-x C-s= で保存， =C-x C-c= で終了
**** コマンド
#+begin_src bash
git commit
git pull_request
#+end_src

** ★演習課題★
*** Init/Status/Addの練習
     1. 解説した手順に従い，my_enpitリポジトリを作成
     2. git statusコマンドを実行
     3. README.mdファイルを作成しなさい
     4. git statusコマンドを実行し，変化を見なさい
     5. commitしなさい．ログを必ず書くこと
     6. git statusコマンドを実行し，変化を見なさい
*** Commit/Log/Pushの練習
     1. README.mdを修正してcommitしなさい
     2. 新しいファイルを作成してcommitしなさい
     3. 作業が完了したら，pushしなさい（ =--set-upstream= が必要）
     4. コミットがpushされていることをWebブラウザで確認しなさい
     5. 作成したファイルを削除してcommitしてpushしなさい
     6. エディタを使って，詳細なログを書きなさい
     7. その他，自由にcommitの作業を試しなさい
*** ここまでの課題の提出
**** 提出物
     - 下記のものを提出してください
       - GitHubとHerokuアカウント
       - 作成したmy_enpitリポジトリのURL
**** 提出先
     - [[[https://docs.google.com/forms/d/1SiKQqDLQw2YiJieYVS79ywpHIaNC3uI9cNPb_ddhC1Q/viewform?usp=send_form][enPiT演習アカウント(2014)]]]

* 第3章 リモートリポジトリでの作業
** ブランチの使い方
*** branchによる開発
**** ブランチとは？
     - リポジトリにはmasterブランチがある
     - 新しい作業を行う場合，必ずbranchを切る
**** コマンド

#+begin_src bash
git branch new_branch
git branch -vv
#+end_src

*** branchのcheckout
**** branchを切り替える
     - checkoutしてブランチを切り替える
     - ブランチをcommitすることができる
     - 切り替える前に，ブランチでの作業はcommitしておく（stashも可）
**** コマンド
#+begin_src bash
git checkout new_branch
<編集作業>
git commit -a -m 'Create a new branch'
#+end_src

*** 他のbranchをmergeする
**** mergeとは
     - ブランチで作業した内容（commit）を，他のブランチに統合すること
     - new_branchでの作業をmasterに統合する場合，最初にmasterをcheckoutする
**** コマンド操作
#+begin_src bash
git checkout master
git merge new_branch
#+end_src

*** Conflict（競合）とその解消
**** Conflictとは
     - branchで行う作業がかち合った場合，発生する
     - mergeする際，conflictが生じた場合，エラーになる
**** 解消方法
     - エディタ等で編集を行い，解消する

** リモートのブランチ
*** BranchのPush
**** リモートへのPush
    - BranchをGitHubにPushすることができる
    - masterブランチをPushした際と同様，upstreamを指定する
    - PushできたかどうかをWebブラウザで確認する

**** コマンド
#+begin_src bash
git push --set-upstream origin new_branch
#+end_src

** Pull request
*** Pull requestの作成
**** Pull Roquestとは？
     - pushしたbranchでの作業の統合（merge）を依頼する
     - hubコマンドの =pull-request= で発行できる

**** コマンド
#+begin_src bash
git pull-request -m 'Update a new branch'
#+end_src

*** Pull requestのmerge
**** Pull requestをレビューする
     - WebブラウザでPull requestを確認する
**** ブラウザでmerge
     - 問題なければmergeボタンを押す
**** コマンドラインでmergeする場合
#+begin_src bash
git merge pull_request_URL
#+end_src

*** BranchのPull
**** BranchをPullするとは
     - リモートで行われた変更を適用すること
     - 内部的にはfetchでダウンロードしてからmergeする
**** コマンド
#+begin_src bash
git checkout master
git pull
#+end_src

** ★演習課題★
*** branchの操作（ローカル）
    1. =my_enpit= リポジトリでブランチを作成しなさい（ =new_branch= ）
    2. =checkout= で =new_branch= に移動する
    3. ファイルを編集しcommitする
    4. =master= ブランチに移動してファイルの内容が
       「編集されていないこと」を確認しなさい
    5. =merge= して，変更を適用しなさい
*** 競合の発生と解消
    1. =new_branch= でファイルを編集して，commitする
    2. =master= に移動し，ファイルの同じ箇所を編集して，commitする
    3. =master= に =new_branch= をmergeして，コンフリクトを発生させる
    4. エディタで競合箇所を修正してcommitする
*** リモートのbranchの操作
    1. 新しいブランチを作成して，remoteにpushする
    2. Pull requestを送る
    3. ブラウザで，Pull requestをマージする
    4. =master= ブランチに移動して， =pull= することで，更新する
* 第4章 GitHubを使った協同作業
** 他の人の開発状況を見る
*** リモートのリポジトリをClone
**** Cloneとは
    - GitHubで公開されているリポジトリはだれでも複製（clone）できる
    - ソースコードはローカルにコピーされ，閲覧やコンパイルなどができるようになる
    - アクセス権限がない場合は，pushできない
**** コマンド
#+begin_src bash
git clone octocat/Spoon-Knife
#+end_src

*** Pull requestをチェックアウト
**** Pull requestのチェックアウト
     - 誰かが作成したPull requestの内容を，ブランチとしてローカルにコピーする
     - 試しに動作させたり，コードをチェックするときなどに利用
**** コマンド
#+begin_src bash
git checkout https://github.com/octocat/Spoon-Knife/pull/3166
#+end_src

** 開発に参加する
*** オリジナルのリポジトリをForkする
**** Forkとは
     - Cloneしたリポジトリを，
       自分のアカウントが所持するリポジトリとして
       GitHub上で複製する
     - =remote= の値は，オリジナルのリポジトリが =origin= ，
       自分のリポジトリは自分のGitHubユーザ名になる
**** コマンド
#+begin_src bash
git fork
git remote -vv
#+end_src

*** ブランチを作成し自分のリポジトリにpush
**** オリジナルの改変等
     - 新しい機能追加等を行う場合，ブランチを作成する
     - ブランチは，自分のリポジトリにpushする
**** コマンド
#+begin_src bash
git branch my_branch
git checkout my_branch
＜編集＞
git commit -a -m 'Update'
git push -u ychubachi my_branch
#+end_src

*** Forkした元にPull Requestを送る
**** コードのレビューやマージを依頼する
     - 新しい機能ができたら，オリジナルにPull requestを送り，
       レビューやマージをしてもらう
**** コマンド
#+begin_src bash
git pull_request -m 'Pull request'
#+end_src


** TODO GitHubのその他の機能
*** Issue
*** Wiki
** TODO ＜演習課題＞
*** our_enpitにファイルを追加する
    1. =ychubich/our_enpit= をcloneしてforkする
    2. 新しいブランチを作成し，新規にファイルを追加する
       - 内容は任意（自己紹介など）
       - Markdownで書いてください（拡張子は.md）
    3. コミットを作成し，pull requestを送信する
    4. 教員がマージ作業を行います
*** 既存のファイルを変更する
    1. README.mdを改変して，pull requestを送信する
    2. GitHubのPull request一覧を確認する
    3. おそらくコンフリクトが発生するので，
       GitHubの指示に従い競合を解消する
*** 隣の人との協同作業
    1. 新しくリポジトリを作成する（名称は任意）
    2. 互いに，隣の席の人にリポジトリ名を教え，forkしてもらい
       Pull requestを送ってもらう
    3. マージしてあげる
    4. 2〜3を繰り返し，協同作業を行ってみよう
* 第5章 クラウドを使った開発
** Heroku
*** herokuのWeb管理画面
*** herokuコマンドによるdeploy
** Travis CI
*** Travis CIのWeb管理画面
* <演習> 静的サイトの開発演習(1)
** 1人でやる演習
*** 演習課題
**** 演習課題
     - あなたがよく知っている「歴史上の有名人」を一人取り上げる
     - その人を紹介するWebページを作成する
     - HTMLを作成する（リンクや画像の埋め込みにもチャレンジ）
     - gitでバージョン管理
     - GitHubにpushする
*** 
*** GitHubでリポジトリを作成
*** Webページを作成してGitHubにpushする
*** 作成した
** 2人でやる演習
*** 隣の人通しでPull Requestを送ってみる
** 「GitHubによるソースコード共有」演習
*** 
** 「HTMLでのサイト構築」演習
*** 演習の流れ
*** 
*** 2人でやる作業
*** グループでやる作業
* <演習> 動的サイトの開発演習(2)
** 「Ruby（Sinatra）によるサイト構築」演習
*** 演習の流れ
** Herokuでのテスト
* [講義] Ruby on Railsを用いた開発
** Ruby on Railsの全体像
** Scaffoldの作成と動作
*** Herokuへのdeploy
*** ScaffoldによるModelの拡張
** RSpecによるテスト
*** RSpecの実行
*** GitHubとTravis CI連携
*** Travis経由でのHerokuへのdeploy
* <演習> Ruby on Railsを用いた開発演習(1)
* <演習> Ruby on Railsを用いた開発演習(2)
* [講義] Web API活用したサービス構築
** 楽天API
* <演習> Web API活用したサービス構築演習(1)
* <演習> Web API活用したサービス構築演習(2)
* [講義] ミニプロジェクト
* <演習> ミニプロジェクト演習(1)
* <演習> ミニプロジェクト演習(2)
* memo
** バージョン管理の概念
*** シナリオ
**** HTMLによるWebページ
**** index.htmlを作りブラウザで開く
*** バージョン管理の基礎知識
**** diff
**** patch
**** sha1

* Tasks
** DONE chocolateyのインストールをkazamでキャプチャする
   CLOSED: [2014-08-18 月 17:27]
** TODO 英語の原典を読めるようになること
** TODO よくある間違い cdしないでgit initするとか．
** TODO OSをインストールし，手順書を参照しながら長々とコマンドを打つ，ということが不要になった．
** TODO アンケートを作成する
- 調査の目的
  - モダンなソフトウエア開発の理解度（これは2回やる）
    - gitについて
      90%（業務でのソフトウエア開発に利用できる）
	, 70%, 50%, 30%,
      10% （ほとんど知らない・使ったことはない）
  - PBLのために，事前学習が役に立ったか（これはPBL後）
    事前学習をした人とそうでない人とで，PBLの満足感，達成感が違うか
    円滑にPBLをすすめることができたか

- 方法論
あなたはBizApp演習の内容を学習しましか？
1. 授業を履修した
   2. ビデオを視聴した
      3. 学習していない
- 道具
** TODO .bash_profileから.bashrcを読み込む（カラー化）
